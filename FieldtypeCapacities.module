<?php

/**
 * A field that stores capacities each with an amount, year start and year end
 *
 * This is an example of creating your own Fieldtype to represent a spreadsheet type table of information.
 *
 */

class FieldtypeCapacities extends FieldtypeMulti {

	public static function getModuleInfo() {
		return array(
			'title' => 'Capacities',
			'version' => 3,
			'summary' => 'Field that stores a table of capacities for a page.',
			'installs' => 'InputfieldCapacities',
			);
	}

	/**
	 * Initialize this Fieldtype
	 *
	 */
	public function init() {
		parent::init();
		$dir = dirname(__FILE__);
		require_once("$dir/Capacity.php");
		require_once("$dir/CapacityArray.php");
	}

	/**
	 * Return the required Inputfield used to populate a field of this type
	 *
	 */
	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->modules->get("InputfieldCapacities");

		// our inputfield requires a Page and Field (most Inputfields don't)
		$inputfield->setPage($page);
		$inputfield->setField($field);

		return $inputfield;
	}

	/**
	 * Return a blank ready-to-populate version of a field of this type
	 *
	 */
	public function getBlankValue(Page $page, Field $field) {
		$capacities = new CapacityArray($page);
		$capacities->setTrackChanges(true);
		return $capacities;
	}


        /**
         * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
	 	 *
         * @param Page $page
         * @param Field $field
         * @param string|int|array $value
         * @return string|int|array|object $value
         *
         */
        public function ___wakeupValue(Page $page, Field $field, $value) {

		// if for some reason we already get a valid value, then just return it
		if($value instanceof CapacityArray) return $value;

		// start a blank value to be populated
		$capacities = $this->getBlankValue($page, $field);

		// if we were given a blank value, then we've got nothing to do: just return a blank CapacityArray
		if(empty($value) || !is_array($value)) return $capacities;

		// create new Capacity objects from each item in the array
		foreach($value as $v) {
			$capacity = new Capacity();
			$capacity->amount = $v['data']; // note we're converting 'data' to 'amount'
			$capacity->capacity_year_start = $v['capacity_year_start'];
			$capacity->capacity_year_end = $v['capacity_year_end'];
			$capacity->setTrackChanges(true);
			$capacities->add($capacity);
		}

		$capacities->resetTrackChanges();

                return $capacities;
        }

        /**
         * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB.
         *
         * @param Page $page
         * @param Field $field
         * @param string|int|array|object $value
         * @return string|int
         *
         */
        public function ___sleepValue(Page $page, Field $field, $value) {

		$sleepValue = array();

		// if we are given something other than an CapacityArray,
		// then just return a blank array
		if(!$value instanceof CapacityArray) return $sleepValue;

		// make the capacities sort by date ascending
		$value->sort('date');

		// convert each Capacity to an array within sleepValue
		foreach($value as $capacity) {
			$sleepValue[] = array(
				'data' => (int) $capacity->amount, // note: amount is becoming data
				'capacity_year_start' => $capacity->capacity_year_start,
				'capacity_year_end' => $capacity->capacity_year_end
				);
		}
		return $sleepValue;
        }

	/**
	 * Given a value, make it clean for storage within a Page
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {

		// if given a blank value, return a valid blank value
		if(empty($value)) return $this->getBlankValue($page, $field, $value);

		// if given something other than an CapacityArray, throw an error
		if(!$value instanceof CapacityArray) {
			throw new WireException("Value set to field '$field->name' must be an CapacityArray");
		}

		// note that sanitization of individual fields within a given capacity is already
		// performed by the Capacity::set() method, so we don't need to do anything else here.

		return $value;
	}

	/**
	 * Format a value for output, called when a Page's outputFormatting is on
	 *
	 */
	public function formatValue(Page $page, Field $field, $value) {
		// we actually don't need to do anything in here since each Capacity object
		// is doing this work in the Capacity::get() method. But I've included this
		// comment here just to explain where that is taking place.
		return $value;
	}

	/**
	 * Return the database schema that defines an Capacity
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field);

		// 'data' is a required field for any Fieldtype, and we're using it to represent our 'amount' field
		$schema['data'] = 'INT NOT NULL DEFAULT 0';

		// our text fields
		$schema['capacity_year_start'] = 'TINYTEXT NOT NULL';
		$schema['capacity_year_end'] = 'TINYTEXT NOT NULL';


		// indexes, for any fields that need to be searchable from selectors
		// in this case, we're just making our 'date' field searchable
		// but the others could easily be added, likely as fulltext indexes
		$schema['keys']['data'] = 'KEY data(data)';

		return $schema;
	}

	/**
	 * Method called when the field is database-queried from a selector
	 *
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {

		// If searching 'date' then assume our default (data) field
		if($subfield == 'amount') $subfield = 'data';

		return parent::getMatchQuery($query, $table, $subfield, $operator, $value);
	}



}

